{
  "name": "six",
  "description": "JavaScript you can bet on.",
  "keywords": [
    "javascript",
    "language",
    "six",
    "compiler"
  ],
  "author": {
    "name": "Matthew Robb"
  },
  "version": "0.0.11",
  "licenses": [
    {
      "type": "MIT",
      "url": "https://raw.github.com/matthewrobb/six/master/LICENSE"
    }
  ],
  "main": "./lib/six",
  "bin": {
    "sake": "./bin/sake",
    "six": "./bin/six"
  },
  "homepage": "http://sixlang.org",
  "bugs": {
    "url": "https://github.com/matthewrobb/six/issues"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/matthewrobb/six.git"
  },
  "dependencies": {
    "esprima-six": "",
    "escodegen": ""
  },
  "devDependencies": {
    "mocha": "",
    "chai": "",
    "should": "",
    "cover": "",
    "dot": ""
  },
  "scripts": {
    "test": "node node_modules/mocha/bin/mocha"
  },
  "readme": "six  &nbsp;*:::* &nbsp; JavaScript you can bet on.\n===\n> Seriously, the shortest path on the Web usually is the winning play.\n> JS is demonstrably able to grow new capabilities with less effort than a “replacement” entails.\n> Always bet on JS!\n> &mdash; <cite>[Brendan Eich][1]</cite>\n\n[1]:https://brendaneich.com/2011/09/capitoljs-rivertrail/\n\n##Elevator\nSix is a language super-set of JavaScript that enables new syntactic features from the 6th edition of ECMAScript to be used, through a transpiler, in your scripts today.\n\nWARNING: Still in a very early state, proceed with caution.\n\nYou can **try it out now** with this interactive [demo](http://sixlang.org/docs/demo/demo.html)\n\n###Usage\n```JavaScript\n// Install\nnpm install six -g\n\n// Execute\nsix myFile.js\n\n// Compile\nsix --compile --output <OUTPUT> <SOURCE>\nsix -c -o <OUTPUT> <SOURCE>\n\n// Watch and compile\nsix -cwo <OUTPUT> <SOURCE>\n\n```\n\n\n###Examples\n```JavaScript\n\n// Arrow Function\n[ 1, 2, 3 ].forEach( item => print(item) )\n\n// Egal Operators\nif(x isnt y && y is z) { }\n\n// Classes\nclass Person {\n  constructor(name) {\n    this.name = name\n  }\n  greet() {\n    print(\"Hello, my name is \" + this.name + \".\")\n  }\n}\n\n// Quasi Literals / Template Strings\nvar me = new Person(\"Matthew\")\nprint(`Hello, my name is ${me.name}.`)\n\n// Object Property Shorthands\nvar myObj = {\n\n  // Method definition\n  method() {\n    print(\"method\")\n  },\n  \n  // Implicit return, concise methods\n  concise( x ) x + 1\n}\n\n// Default and Rest parameters\nfunction x( y=0, ...z ) {}\n\n// Spread\nvar x = [ 1, 2, 3 ]\nprint(...x)\n\n// Destructuring\nvar [ a, b ] = x\nvar { c, d } = { c: 1, d: 2 }\n\n// Iterators\nvar stuff = [\"shoes\", \"shirt\", \"shorts\"]\n\nfor(var thing of stuff) {\n  print(thing)\n}\n\n// Comprehensions\nvar count = [1, 2, 3]\nvar plusOne = [x + 1 for(x of count)]\n\n// Importing modules from files or node modules\nmodule path = \"path\"\nmodule local = \"./local.js\"\n\n// Aliasing modules\nmodule files = fs\n\n// Importing content from a module\nimport dirname from fs\n\n// Importing content direct from a file\nimport local_function from \"./local.js\"\n\n// Export a function from a module.\nexport function mod_func() { }\n\n// Export variables from a module.\nexport var a = 400, b = {}\n\n```\n\n##Module Support\nsix outputs [UMD](https://github.com/umdjs/umd) compatible modules allowing modules to work in CommonJS environments such as node in addition to the web browser via an [AMD](http://requirejs.org/docs/whyamd.html) module environment such as [requirejs](http://requirejs.org/). Each file forms an implicit module whether a \"module\" declaration is used or not and thus the export (or the exports object) must be used to export data to the scope. The \"-g\" or \"--global\" command-line argument can be used to inhibit this behavior allowing code the possiblity to write directly to the global namespace when imported using an AMD module loader.\n\n##About\nThe Six project is building on top of the work already being done by different individuals and groups around the web. Particularly influential is the amazing work done by [Ariya Hidayat](https://github.com/ariya) and collaborators on the ECMAScript parser [Esprima](http://esprima.org).\n\nThe project was started out of a desire to build on the work done with the [Harmonizr](https://github.com/jdiamond/harmonizr) project by [Jason Diamond](https://github.com/jdiamond) and still borrows some of it's internals from that source.\n\nA good deal of the work being done on and around the general workflows and APIs has been modeled after the very successfull [CoffeeScript](http://coffeescript.or) project by [Jeremy Ashkenas](https://github.com/jashkenas).\n\nThe ability to offer a tool such as this can't possibly exist without the members of [es-discuss](https://mail.mozilla.org/listinfo/es-discuss), and all the great people involved with [TC39](http://www.ecma-international.org/memento/TC39.htm) and standardization of the ECMAScript language.\n\nI have a fundamental belief in the philosophies around these projects and the open web in general. I believe this platform's future is vital to us all and I want to do everything I can to help move the needle.\n\nI'm betting on JavaScript.\n",
  "readmeFilename": "README.md",
  "_id": "six@0.0.11",
  "_from": "six@"
}
